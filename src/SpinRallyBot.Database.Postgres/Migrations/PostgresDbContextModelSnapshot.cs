// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpinRallyBot;

#nullable disable

namespace SpinRallyBot.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    partial class PostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SpinRallyBot.Models.BackNavigationEntity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("UserId", "ChatId");

                    b.ToTable("BackNavigations");
                });

            modelBuilder.Entity("SpinRallyBot.Models.PipelineStateEntity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("UserId", "ChatId");

                    b.ToTable("PipelineState");
                });

            modelBuilder.Entity("SpinRallyBot.Models.PlayerEntity", b =>
                {
                    b.Property<string>("PlayerUrl")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerUrl");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SpinRallyBot.Models.SubscriptionEntity", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlayerUrl")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ChatId", "PlayerUrl");

                    b.HasIndex("PlayerUrl");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SpinRallyBot.Models.SubscriptionEntity", b =>
                {
                    b.HasOne("SpinRallyBot.Models.PlayerEntity", "Player")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlayerUrl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SpinRallyBot.Models.PlayerEntity", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
